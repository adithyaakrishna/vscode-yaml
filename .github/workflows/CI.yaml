# This is a basic workflow

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the main branch
on:
  push
  #   branches: [main]
  # pull_request:
  #   branches: [main]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Set up Node
      - name: Use Node 14
        uses: actions/setup-node@v1
        with:
          node-version: 14

      # Get the yarn cache directory
      - name: Get Yarn Cache Directory
        id: yarn-cache-dir
        run: |
          echo "::set-output name=dir::$(yarn cache dir)"

      # Check for yarn cache
      - name: Check for Yarn Cache
        uses: actions/cache@v3
        id: yarn-cache # use this to check for `cache-hit` ==> if: steps.yarn-cache.outputs.cache-hit != 'true'
        with:
          path: ${{ steps.yarn-cache-dir.outputs.dir }}
          key: ${{ matrix.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ matrix.os }}-node-

      # Run install dependencies
      - name: Install Dependencies # Checks yarn cache and use it for dependencies install
        if: steps.yarn-cache.outputs.cache-hit != 'true'
        run: yarn

      # Build extension
      - name: Run build
        run: yarn build

      # Run tests
      - name: Run Test
        uses: GabrielBB/xvfb-action@v1.6
        with:
          run: yarn test

      # Run UI tests
      - name: Run UI Test
        uses: GabrielBB/xvfb-action@v1.6
        with:
          run: yarn run ui-test

      #Package vsix
      - name: Build .vsix package on Linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          VERSION=$(node -p "require('./package.json').version")
          npx vsce package -o vscode-yaml-${VERSION}-${GITHUB_RUN_ID}-${GITHUB_RUN_NUMBER}.vsix

      #Upload vsix
      - name: Upload linux-built vsix
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v2
        with:
          name: vscode-yaml
          path: vscode-yaml*.vsix

      # Archive test results
      - name: Archiving test artifacts
        uses: actions/upload-artifact@v2
        with: 
          name: my-artifact
          path: |
            test-resources/screenshots/*.png
            test-resources/*.log
            test-resources/test-report.xml
          retention-days: 2
